<?php
// $Id$
/**
 * @file bidi.module
 * TODO: Enter file description here.
 */

/**
 * Implementation of hook_filter().
 */
function bidi_filter($op, $delta = 0, $format = -1, $text = '', $cache_id = 0) {
  switch ($op) {
    case 'list':
      return array(
        0 => t('Cleanup RTL'),
      );

    case 'description':
      if ($delta == 0) {
        return t('Assures that all explicit markers of text direction are matched with a Pop-Directional-Formatting.');
      }

    case 'prepare':
      return $text;

    case 'process':
      if ($delta = 0) {
        $text = bidi_unicode_cleanup_rtl($text);
      }
      return $text;
  }
}

/**
 *
 * from http://www.iamcal.com/understanding-bidirectional-text/
 */
function bidi_unicode_cleanup_rtl($data) {

  #
  # LRE - U+202A - 0xE2 0x80 0xAA
  # RLE - U+202B - 0xE2 0x80 0xAB
  # LRO - U+202D - 0xE2 0x80 0xAD
  # RLO - U+202E - 0xE2 0x80 0xAE
  #
  # PDF - U+202C - 0xE2 0x80 0xAC
  #

  $explicits = '\xE2\x80\xAA|\xE2\x80\xAB|\xE2\x80\xAD|\xE2\x80\xAE';
  $pdf = '\xE2\x80\xAC';

  preg_match_all("!$explicits!",  $data, $m1, PREG_OFFSET_CAPTURE | PREG_SET_ORDER);
  preg_match_all("!$pdf!",  $data, $m2, PREG_OFFSET_CAPTURE | PREG_SET_ORDER);

  if (count($m1) || count($m2)){

    $p = array();
    foreach ($m1 as $m) {
      $p[$m[0][1]] = 'push';
    }
    foreach ($m2 as $m){
      $p[$m[0][1]] = 'pop';
    }
    ksort($p);

    $offset = 0;
    $stack = 0;
    foreach ($p as $pos => $type) {

      if ($type == 'push') {
        $stack++;
      }
      else {
        if ($stack) {
          $stack--;
        }
        else {
          # we have a pop without a push - remove it
          $data = substr($data, 0, $pos-$offset) . substr($data, $pos+3-$offset);
          $offset += 3;
        }
      }
    }

    # now add some pops if your stack is bigger than 0
    for ($i=0; $i < $stack; $i++){
      $data .= "\xE2\x80\xAC";
    }

    return $data;
  }

  return $data;
}
